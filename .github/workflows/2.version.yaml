name: Version changes to the main branch

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  version-main-branch-changes:
    permissions:
      contents: read

    runs-on: ubuntu-latest

    steps:
      - uses: actions/create-github-app-token@v1
        id: generate-app-token
        with:
          app-id: ${{ vars.APP_ID_WORKFLOW_DOC_CONTINUOUS_DELIVERY }}
          private-key: ${{ secrets.APP_KEY_WORKFLOW_DOC_CONTINUOUS_DELIVERY }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate-app-token.outputs.token }}

      - name: Compute latest version
        id: get_latest_version
        run: |
          # Retrieve the latest git tag, as we will only be processing one delivery line.
          latest_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

          echo "Latest version is $latest_version"

          echo "latest_version=$latest_version" >> "$GITHUB_OUTPUT"

      - name: Compute next version
        id: get_next_version
        run: |
          major=$(echo $latest_version | cut --delimiter=. --fields=1)
          minor=$(echo $latest_version | cut --delimiter=. --fields=2)
          patch=$(echo $latest_version | cut --delimiter=. --fields=3)

          change_type=$(git log -1 --pretty=%B | grep -oP '(?<=change-type:\s).+' | xargs)
          echo "Change type is: $change_type"

          if [ "$change_type" == "backward-compatible fixes" ]; then
            patch=$((patch+1))
          elif [ "$change_type" == "backward-compatible features" ]; then
            minor=$((minor+1))
            patch="0"
          elif [ "$change_type" == "backward-incompatible" ]; then
            major_number=$(echo "$major" | cut --delimiter=v --fields=2)

            major="v$((major_number+1))"
            minor="0"
            patch="0"
          fi

          next_version="$major.$minor.$patch"
          echo "Next version is $next_version"

          echo "next_version_major=$major" >> "$GITHUB_OUTPUT"
          echo "next_version_minor=$minor" >> "$GITHUB_OUTPUT"
          echo "next_version_patch=$patch" >> "$GITHUB_OUTPUT"
          echo "next_version=$next_version" >> "$GITHUB_OUTPUT"
        env:
          latest_version: ${{ steps.get_latest_version.outputs.latest_version }}

      - name: Configure git user
        run: |
          git config user.name "workflow-doc-continuous-delivery[bot]"
          git config user.email "workflow-doc-continuous-delivery[bot]@users.noreply.github.com"

      - name: Create reproducible tag
        run: |
          if git tag -a "$next_version" -m "$next_version"; then
            git push --follow-tags origin "$next_version"
          else
            echo "Failed to create tag $next_version, does it already exist?"
          fi
        env:
          next_version: "${{ steps.get_next_version.outputs.next_version }}"

      - name: Save major version tag
        run: |
          if git tag --force -a "$next_version_major" -m "Update $next_version_major tag"; then
            git push --follow-tags origin "$next_version_major" --force
          else
            echo "Failed to save updated major tag $next_version_major, does it already exist"
          fi
        env:
          next_version_major: "${{ steps.get_next_version.outputs.next_version_major }}"
